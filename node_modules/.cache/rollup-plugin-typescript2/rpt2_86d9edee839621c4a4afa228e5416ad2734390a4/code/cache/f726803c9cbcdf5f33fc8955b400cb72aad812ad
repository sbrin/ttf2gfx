{"code":"import { __awaiter, __generator } from \"tslib\";\nimport { loadFont, extractGlyphs } from './core/fontLoader';\n// import {rasterizeGlyph, GlyphBitmap} from './core/glyphRasterizer';\n// import {generateAdafruitGfxFont} from './core/fontGenerator';\n// import {createOutputFile} from './core/fileHandler';\nimport { DEFAULT_PIXEL_HEIGHT } from './const';\n/**\n * Converts a font File into an Adafruit_GFX-compatible font File.\n *\n * @param inputFile - The input font File (TTF, OTF, WOFF).\n * @param pixelHeight - Desired font height in pixels. Defaults to 12.\n * @returns A Promise that resolves to the output File containing the Adafruit_GFX font.\n */\nexport function truetype2gfx(inputFile_1) {\n    return __awaiter(this, arguments, void 0, function (inputFile, pixelHeight) {\n        var font, glyphs, error_1;\n        if (pixelHeight === void 0) { pixelHeight = DEFAULT_PIXEL_HEIGHT; }\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    console.log('truetype2gfx ok');\n                    _a.label = 1;\n                case 1:\n                    _a.trys.push([1, 3, , 4]);\n                    return [4 /*yield*/, loadFont(inputFile)];\n                case 2:\n                    font = _a.sent();\n                    console.log('font', font);\n                    glyphs = extractGlyphs(font);\n                    console.log('glyphs', glyphs);\n                    // // Rasterize each glyph\n                    // const rasterizedGlyphs: GlyphBitmap[] = glyphs.map((glyph) => rasterizeGlyph(glyph, font, pixelHeight));\n                    // // Generate Adafruit_GFX font content\n                    // const gfxFontContent = generateAdafruitGfxFont(rasterizedGlyphs);\n                    // // Create the output File object\n                    // const outputFile = createOutputFile(gfxFontContent, 'customFont.h');\n                    // return outputFile;\n                    return [2 /*return*/, new Promise(function () { return new File([], 'test'); })];\n                case 3:\n                    error_1 = _a.sent();\n                    throw new Error(\"Font conversion failed: \".concat(error_1.message));\n                case 4: return [2 /*return*/];\n            }\n        });\n    });\n}\n//# sourceMappingURL=index.js.map","references":["/Users/sun/lopaka_cloud/tools/truetype2gfx/src/core/fontLoader.ts","/Users/sun/lopaka_cloud/tools/truetype2gfx/src/const.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/index.ts\"],\"names\":[],\"mappings\":\";AAAA,OAAO,EAAC,QAAQ,EAAE,aAAa,EAAC,MAAM,mBAAmB,CAAC;AAC1D,sEAAsE;AACtE,gEAAgE;AAChE,uDAAuD;AACvD,OAAO,EAAC,oBAAoB,EAAC,MAAM,SAAS,CAAC;AAE7C;;;;;;GAMG;AACH,MAAM,UAAgB,YAAY;wDAAC,SAAe,EAAE,WAA0C;;QAA1C,4BAAA,EAAA,kCAA0C;;;;oBAC1F,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;;;;oBAGd,qBAAM,QAAQ,CAAC,SAAS,CAAC,EAAA;;oBAAhC,IAAI,GAAG,SAAyB;oBACtC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;oBAGpB,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,CAAC;oBACnC,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;oBAE9B,0BAA0B;oBAC1B,2GAA2G;oBAE3G,wCAAwC;oBACxC,oEAAoE;oBAEpE,mCAAmC;oBACnC,uEAAuE;oBAEvE,qBAAqB;oBACrB,sBAAO,IAAI,OAAO,CAAC,cAAM,OAAA,IAAI,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,EAApB,CAAoB,CAAC,EAAC;;;oBAE/C,MAAM,IAAI,KAAK,CAAC,kCAA2B,OAAK,CAAC,OAAO,CAAE,CAAC,CAAC;;;;;CAEnE\"}","dts":{"name":"/Users/sun/lopaka_cloud/tools/truetype2gfx/types/index.d.ts","writeByteOrderMark":false,"text":"/**\n * Converts a font File into an Adafruit_GFX-compatible font File.\n *\n * @param inputFile - The input font File (TTF, OTF, WOFF).\n * @param pixelHeight - Desired font height in pixels. Defaults to 12.\n * @returns A Promise that resolves to the output File containing the Adafruit_GFX font.\n */\nexport declare function truetype2gfx(inputFile: File, pixelHeight?: number): Promise<File>;\n"}}
