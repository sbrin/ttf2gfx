{"version":3,"file":"bundle.min.js","sources":["../src/index.ts"],"sourcesContent":["// import {loadFont, extractGlyphs} from './core/fontLoader';\n// import {rasterizeGlyph, GlyphBitmap} from './core/glyphRasterizer';\n// import {generateAdafruitGfxFont} from './core/fontGenerator';\n// import {createOutputFile} from './core/fileHandler';\nimport {DEFAULT_PIXEL_HEIGHT} from './const';\n\n/**\n * Converts a font File into an Adafruit_GFX-compatible font File.\n *\n * @param inputFile - The input font File (TTF, OTF, WOFF).\n * @param pixelHeight - Desired font height in pixels. Defaults to 12.\n * @returns A Promise that resolves to the output File containing the Adafruit_GFX font.\n */\nexport async function convertFontToGfx(inputFile: File, pixelHeight: number = DEFAULT_PIXEL_HEIGHT) {\n    try {\n        // // Load and parse the font\n        // const font = await loadFont(inputFile);\n\n        // // Extract relevant glyphs\n        // const glyphs = extractGlyphs(font);\n\n        // // Rasterize each glyph\n        // const rasterizedGlyphs: GlyphBitmap[] = glyphs.map((glyph) => rasterizeGlyph(glyph, font, pixelHeight));\n\n        // // Generate Adafruit_GFX font content\n        // const gfxFontContent = generateAdafruitGfxFont(rasterizedGlyphs);\n\n        // // Create the output File object\n        // const outputFile = createOutputFile(gfxFontContent, 'customFont.h');\n\n        // return outputFile;\n        console.log('test ok');\n    } catch (error: any) {\n        throw new Error(`Font conversion failed: ${error.message}`);\n    }\n}\n"],"names":["inputFile_1","__awaiter","this","arguments","inputFile","pixelHeight","console","log","error","Error","concat","message"],"mappings":"6uDAasCA,GAAC,OAAAC,EAAAC,KAAAC,eAAA,GAAA,SAAAC,EAAiBC,8BACpD,IAiBIC,QAAQC,IAAI,WACd,MAAOC,GACL,MAAM,IAAIC,MAAM,2BAAAC,OAA2BF,EAAMG,yBAExD"}